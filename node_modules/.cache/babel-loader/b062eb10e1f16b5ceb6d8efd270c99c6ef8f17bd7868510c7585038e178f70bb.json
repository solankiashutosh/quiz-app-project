{"ast":null,"code":"import _objectSpread from \"C:/Users/Asus/quizapp-project/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Asus/quizapp-project/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onUpdate\", \"onComplete\"];\nimport { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nvar sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  var onUpdate = _ref.onUpdate,\n    onComplete = _ref.onComplete,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var keyframes = options.keyframes,\n    _options$duration = options.duration,\n    duration = _options$duration === void 0 ? 0.3 : _options$duration,\n    _options$elapsed = options.elapsed,\n    elapsed = _options$elapsed === void 0 ? 0 : _options$elapsed,\n    ease = options.ease;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n    var sampleAnimation = animate(options);\n    var state = {\n      done: false,\n      value: keyframes[0]\n    };\n    var pregeneratedKeyframes = [];\n    var t = 0;\n    while (!state.done) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  var animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    delay: -elapsed,\n    duration: duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  }));\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = function () {\n    value.set(keyframes[keyframes.length - 1]);\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return function () {\n    /**\n     * WAAPI doesn't natively have any interruption capabilities.\n     *\n     * Rather than read commited styles back out of the DOM, we can\n     * create a renderless JS animation and sample it twice to calculate\n     * its current value, \"previous\" value, and therefore allow\n     * Motion to calculate velocity for any subsequent animation.\n     */\n    var currentTime = animation.currentTime;\n    if (currentTime) {\n      var _sampleAnimation = animate(options);\n      value.setWithVelocity(_sampleAnimation.sample(currentTime - sampleDelta).value, _sampleAnimation.sample(currentTime).value, sampleDelta);\n    }\n    sync.update(function () {\n      return animation.cancel();\n    });\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animate","animateStyle","isWaapiSupportedEasing","sampleDelta","createAcceleratedAnimation","value","valueName","_ref","onUpdate","onComplete","options","_objectWithoutProperties","_excluded","keyframes","_options$duration","duration","_options$elapsed","elapsed","ease","type","sampleAnimation","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","_objectSpread","delay","onfinish","set","length","currentTime","setWithVelocity","update","cancel"],"sources":["C:/Users/Asus/quizapp-project/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animate } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    let { keyframes, duration = 0.3, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (options.type === \"spring\" || !isWaapiSupportedEasing(options.ease)) {\n        const sampleAnimation = animate(options);\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        let t = 0;\n        while (!state.done) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(keyframes[keyframes.length - 1]);\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return () => {\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        const { currentTime } = animation;\n        if (currentTime) {\n            const sampleAnimation = animate(options);\n            value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n        }\n        sync.update(() => animation.cancel());\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}