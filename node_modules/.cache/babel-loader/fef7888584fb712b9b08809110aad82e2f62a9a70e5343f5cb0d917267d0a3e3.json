{"ast":null,"code":"import { TYPE } from \"./Actions\";\n\n//  this is our initital state of the app //\nconst initialState = {\n  quiz: [],\n  name: \"\",\n  playQuiz: [],\n  answers: []\n};\n\n// the reducer containes all the necessary functions in order to update our state accordingly //\n\nexport const reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let actions = arguments.length > 1 ? arguments[1] : undefined;\n  if (actions.type === TYPE.ADDQUIZ) {\n    return {\n      ...state,\n      quiz: [...state.quiz, actions.payload]\n    };\n  }\n  if (actions.type === TYPE.TOGGLEACTIVE) {\n    const findElem = state.quiz.find(el => el.id === actions.payload);\n    const filteredArr = state.quiz.filter(el => el.id !== actions.payload);\n    const newArr = [{\n      ...findElem,\n      isActive: !findElem.isActive\n    }, ...filteredArr];\n    return {\n      ...state,\n      quiz: newArr\n    };\n  }\n  if (actions.type === TYPE.DELETEQUIZ) {\n    const filteredArr = state.quiz.filter(el => el.id !== actions.payload);\n    return {\n      ...state,\n      quiz: filteredArr\n    };\n  }\n  if (actions.type === TYPE.GETNAME) {\n    return {\n      ...state,\n      name: actions.payload\n    };\n  }\n  if (actions.type === TYPE.PLAYQUIZ) {\n    const findElem = state.quiz.find(el => el.id === actions.payload);\n    return {\n      ...state,\n      playQuiz: findElem\n    };\n  }\n  if (actions.type === TYPE.GETANSWER) {\n    console.log(actions.payload);\n    return {\n      ...state,\n      answers: [...state.answers, actions.payload]\n    };\n  }\n  if (actions.type === TYPE.RESET) {\n    return {\n      ...state,\n      name: \"\",\n      playQuiz: [],\n      answers: []\n    };\n  }\n  return state;\n};","map":{"version":3,"names":["TYPE","initialState","quiz","name","playQuiz","answers","reducer","state","arguments","length","undefined","actions","type","ADDQUIZ","payload","TOGGLEACTIVE","findElem","find","el","id","filteredArr","filter","newArr","isActive","DELETEQUIZ","GETNAME","PLAYQUIZ","GETANSWER","console","log","RESET"],"sources":["C:/Users/Asus/quizapp-project/src/components/Redux/Reducer.js"],"sourcesContent":["import { TYPE } from \"./Actions\";\r\n\r\n//  this is our initital state of the app //\r\nconst initialState = {\r\n  quiz: [],\r\n  name: \"\",\r\n  playQuiz: [],\r\n  answers: [],\r\n};\r\n\r\n// the reducer containes all the necessary functions in order to update our state accordingly //\r\n\r\nexport const reducer = (state = initialState, actions) => {\r\n  if (actions.type === TYPE.ADDQUIZ) {\r\n    return { ...state, quiz: [...state.quiz, actions.payload] };\r\n  }\r\n\r\n  if (actions.type === TYPE.TOGGLEACTIVE) {\r\n    const findElem = state.quiz.find((el) => el.id === actions.payload);\r\n\r\n    const filteredArr = state.quiz.filter((el) => el.id !== actions.payload);\r\n\r\n    const newArr = [\r\n      { ...findElem, isActive: !findElem.isActive },\r\n      ...filteredArr,\r\n    ];\r\n\r\n    return {\r\n      ...state,\r\n      quiz: newArr,\r\n    };\r\n  }\r\n\r\n  if (actions.type === TYPE.DELETEQUIZ) {\r\n    const filteredArr = state.quiz.filter((el) => el.id !== actions.payload);\r\n\r\n    return {\r\n      ...state,\r\n      quiz: filteredArr,\r\n    };\r\n  }\r\n\r\n  if (actions.type === TYPE.GETNAME) {\r\n    return {\r\n      ...state,\r\n      name: actions.payload,\r\n    };\r\n  }\r\n\r\n  if (actions.type === TYPE.PLAYQUIZ) {\r\n    const findElem = state.quiz.find((el) => el.id === actions.payload);\r\n\r\n    return {\r\n      ...state,\r\n      playQuiz: findElem,\r\n    };\r\n  }\r\n\r\n  if (actions.type === TYPE.GETANSWER) {\r\n    console.log(actions.payload);\r\n    return {\r\n      ...state,\r\n      answers: [...state.answers, actions.payload],\r\n    };\r\n  }\r\n\r\n  if (actions.type === TYPE.RESET) {\r\n    return {\r\n      ...state,\r\n      name: \"\",\r\n      playQuiz: [],\r\n      answers: [],\r\n    };\r\n  }\r\n\r\n  return state;\r\n};"],"mappings":"AAAA,SAASA,IAAI,QAAQ,WAAW;;AAEhC;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,EAAE;EACRC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAE,EAAE;EACZC,OAAO,EAAE;AACX,CAAC;;AAED;;AAEA,OAAO,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAAmC;EAAA,IAAlCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,YAAY;EAAA,IAAEU,OAAO,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACnD,IAAIC,OAAO,CAACC,IAAI,KAAKZ,IAAI,CAACa,OAAO,EAAE;IACjC,OAAO;MAAE,GAAGN,KAAK;MAAEL,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAI,EAAES,OAAO,CAACG,OAAO;IAAE,CAAC;EAC7D;EAEA,IAAIH,OAAO,CAACC,IAAI,KAAKZ,IAAI,CAACe,YAAY,EAAE;IACtC,MAAMC,QAAQ,GAAGT,KAAK,CAACL,IAAI,CAACe,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IAEnE,MAAMM,WAAW,GAAGb,KAAK,CAACL,IAAI,CAACmB,MAAM,CAAEH,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IAExE,MAAMQ,MAAM,GAAG,CACb;MAAE,GAAGN,QAAQ;MAAEO,QAAQ,EAAE,CAACP,QAAQ,CAACO;IAAS,CAAC,EAC7C,GAAGH,WAAW,CACf;IAED,OAAO;MACL,GAAGb,KAAK;MACRL,IAAI,EAAEoB;IACR,CAAC;EACH;EAEA,IAAIX,OAAO,CAACC,IAAI,KAAKZ,IAAI,CAACwB,UAAU,EAAE;IACpC,MAAMJ,WAAW,GAAGb,KAAK,CAACL,IAAI,CAACmB,MAAM,CAAEH,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IAExE,OAAO;MACL,GAAGP,KAAK;MACRL,IAAI,EAAEkB;IACR,CAAC;EACH;EAEA,IAAIT,OAAO,CAACC,IAAI,KAAKZ,IAAI,CAACyB,OAAO,EAAE;IACjC,OAAO;MACL,GAAGlB,KAAK;MACRJ,IAAI,EAAEQ,OAAO,CAACG;IAChB,CAAC;EACH;EAEA,IAAIH,OAAO,CAACC,IAAI,KAAKZ,IAAI,CAAC0B,QAAQ,EAAE;IAClC,MAAMV,QAAQ,GAAGT,KAAK,CAACL,IAAI,CAACe,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,EAAE,KAAKR,OAAO,CAACG,OAAO,CAAC;IAEnE,OAAO;MACL,GAAGP,KAAK;MACRH,QAAQ,EAAEY;IACZ,CAAC;EACH;EAEA,IAAIL,OAAO,CAACC,IAAI,KAAKZ,IAAI,CAAC2B,SAAS,EAAE;IACnCC,OAAO,CAACC,GAAG,CAAClB,OAAO,CAACG,OAAO,CAAC;IAC5B,OAAO;MACL,GAAGP,KAAK;MACRF,OAAO,EAAE,CAAC,GAAGE,KAAK,CAACF,OAAO,EAAEM,OAAO,CAACG,OAAO;IAC7C,CAAC;EACH;EAEA,IAAIH,OAAO,CAACC,IAAI,KAAKZ,IAAI,CAAC8B,KAAK,EAAE;IAC/B,OAAO;MACL,GAAGvB,KAAK;MACRJ,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAE;IACX,CAAC;EACH;EAEA,OAAOE,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}